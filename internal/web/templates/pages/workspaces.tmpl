{{define "workspaces"}}
<!DOCTYPE html>
<html data-bs-theme="light">
{{template "head.tmpl" .}}

<body class="bg-light">
  <!-- Navigation -->
  <nav class="navbar navbar-expand-lg glassmorphism position-fixed w-100 top-0" style="z-index: 1030; backdrop-filter: blur(10px);">
    <div class="container-fluid px-4">
      <div class="d-flex align-items-center w-100">
        <button id="sidebarToggle" class="modern-btn modern-btn-secondary d-lg-none me-3" title="Toggle Sidebar">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
            <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
          </svg>
        </button>

        <a class="navbar-brand fw-bold d-flex align-items-center" href="/" style="color: var(--primary-color);">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="me-2">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
          {{.Title}}
        </a>

        <div class="d-flex align-items-center gap-3 ms-auto">
          <span id="currentAgentDisplay" class="modern-badge badge-secondary d-flex align-items-center gap-2" style="cursor:pointer; padding: 0.5rem 1rem; border-radius: var(--radius-lg);">
            <span class="status-indicator status-online"></span>
            <span class="fw-medium">{{.CurrentAgent}}</span>
          </span>
          <button id="darkModeToggle" class="modern-btn modern-btn-secondary">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-2.98 0-5.4-2.42-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z"/>
            </svg>
            <span>Dark</span>
          </button>
        </div>
      </div>
    </div>
  </nav>

  <div class="main-content-wrapper">
    {{template "sidebar.tmpl" .}}

    <!-- Main Content -->
    <div class="main-content">
      <div class="container-fluid py-4">
        <div class="modern-card p-4 mb-4">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h2 class="mb-2" style="color: var(--text-primary);">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="me-2" style="vertical-align: text-bottom;">
                  <path d="M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z"/>
                </svg>
                Workspaces
              </h2>
              <p class="mb-0" style="color: var(--text-secondary);">Design and manage multi-agent workflows</p>
            </div>
            <div class="d-flex gap-2">
              <button class="modern-btn modern-btn-primary" onclick="openCreateWorkspaceModal()">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                  <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
                </svg>
                Create Workspace
              </button>
            </div>
          </div>
        </div>

        <!-- Workspaces Grid -->
        <div id="workspaces-grid" class="row g-4">
          <div class="col-12 text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3" style="color: var(--text-muted);">Loading workspaces...</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Create Workspace Modal -->
  <div class="modal fade" id="createWorkspaceModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" style="color: var(--text-primary);">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2">
              <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
            </svg>
            Create Workspace
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
          <form id="createWorkspaceForm">
            <!-- Basic Info -->
            <div class="mb-4">
              <h6 style="color: var(--text-primary);">Basic Information</h6>
              <div class="mb-3">
                <label class="form-label" style="color: var(--text-primary);">Workspace Name</label>
                <input type="text" id="workspace-name" class="form-control" placeholder="My Research Project" required>
              </div>
              <div class="mb-3">
                <label class="form-label" style="color: var(--text-primary);">Description</label>
                <textarea id="workspace-description" class="form-control" rows="2" placeholder="Brief description of the workspace"></textarea>
              </div>
              <div class="mb-3">
                <label class="form-label" style="color: var(--text-primary);">Parent Agent</label>
                <select id="parent-agent" class="form-control" required>
                  <option value="">Loading agents...</option>
                </select>
              </div>
            </div>

            <!-- Agent Selection -->
            <div class="mb-4">
              <h6 style="color: var(--text-primary);">Select Agents</h6>
              <p class="text-muted small mb-3">Choose which agents will participate in this workspace</p>
              <div id="agents-selection" class="row g-3">
                <!-- Will be populated dynamically -->
              </div>
            </div>

            <!-- Workflow Designer -->
            <div class="mb-4">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h6 class="mb-0" style="color: var(--text-primary);">Workflow Design</h6>
                <button type="button" class="modern-btn modern-btn-secondary" onclick="addWorkflowStep()">
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                    <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
                  </svg>
                  Add Step
                </button>
              </div>
              <div id="workflow-steps">
                <!-- Will be populated with steps -->
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="modern-btn modern-btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" id="createWorkspaceBtn" class="modern-btn modern-btn-primary">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
              <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
            </svg>
            Create Workspace
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Workspace Details Modal -->
  <div class="modal fade" id="workspaceDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" style="color: var(--text-primary);">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2">
              <path d="M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"/>
            </svg>
            Workspace Details
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body" id="workspace-details-content" style="max-height: 70vh; overflow-y: auto;">
          <!-- Content will be populated dynamically -->
        </div>
        <div class="modal-footer">
          <button type="button" class="modern-btn modern-btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script src="js/modules/resizer.js"></script>
  <script src="js/modules/settings.js"></script>
  <script src="js/modules/agents.js"></script>
  <script src="js/modules/plugins.js"></script>
  <script src="js/modules/plugin-config.js"></script>
  <script src="js/modules/plugin-store.js"></script>
  <script src="js/modules/apikey.js"></script>
  <script src="js/modules/sidebar.js"></script>
  <script src="js/modules/update-checker.js"></script>
  <script src="js/modules/plugin-update-checker.js"></script>
  <script src="js/modules/plugin-health.js"></script>
  <script src="js/modules/file-upload.js"></script>

  <script>
    let availableAgents = [];
    let selectedAgents = new Set();
    let workflowSteps = [];

    // Load workspaces and agents on page load
    document.addEventListener('DOMContentLoaded', function() {
      loadWorkspaces();
      loadAgents();
    });

    async function loadWorkspaces() {
      try {
        const response = await fetch('/api/orchestration/workspaces');
        const data = await response.json();

        if (data.error) {
          showError('Failed to load workspaces: ' + data.error);
          return;
        }

        renderWorkspaces(data.workspaces || []);
      } catch (error) {
        console.error('Error loading workspaces:', error);
        showError('Failed to load workspaces');
      }
    }

    function renderWorkspaces(workspaces) {
      const grid = document.getElementById('workspaces-grid');

      if (workspaces.length === 0) {
        grid.innerHTML = `
          <div class="col-12 text-center py-5">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="currentColor" style="color: var(--text-muted); margin-bottom: 1rem;">
              <path d="M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z"/>
            </svg>
            <h5 style="color: var(--text-primary);">No workspaces yet</h5>
            <p style="color: var(--text-muted);">Create your first workspace to start collaborating with multiple agents</p>
            <button class="modern-btn modern-btn-primary mt-3" onclick="openCreateWorkspaceModal()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
              </svg>
              Create Workspace
            </button>
          </div>
        `;
        return;
      }

      grid.innerHTML = workspaces.map(workspace => {
        const statusBadge = workspace.status === 'active' ? 'badge-success' :
                           workspace.status === 'completed' ? 'badge-info' : 'badge-secondary';

        return `
          <div class="col-md-6 col-lg-4">
            <div class="modern-card p-4 h-100 d-flex flex-column" onclick="viewWorkspace('${workspace.id}')">
              <div class="d-flex justify-content-between align-items-start mb-3">
                <h5 style="color: var(--text-primary);">${escapeHtml(workspace.name || workspace.id)}</h5>
                <span class="modern-badge ${statusBadge}">${escapeHtml(workspace.status || 'unknown')}</span>
              </div>

              ${workspace.description ? `
                <p class="text-muted small mb-3">${escapeHtml(workspace.description)}</p>
              ` : ''}

              <div class="mb-3">
                <small style="color: var(--text-secondary);">Agents: ${workspace.agents ? workspace.agents.length : 0}</small>
              </div>

              ${workspace.workflow ? `
                <div class="mt-auto">
                  <div class="progress mb-2" style="height: 6px;">
                    <div class="progress-bar" role="progressbar" style="width: ${workspace.workflow.progress || 0}%"></div>
                  </div>
                  <small style="color: var(--text-secondary);">
                    ${workspace.workflow.progress || 0}% complete
                  </small>
                </div>
              ` : ''}

              <div class="d-flex gap-2 mt-3">
                <button class="modern-btn modern-btn-secondary flex-grow-1" onclick="event.stopPropagation(); viewWorkspace('${workspace.id}')">
                  View
                </button>
                <button class="modern-btn modern-btn-danger" onclick="event.stopPropagation(); deleteWorkspace('${workspace.id}')">
                  Delete
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    async function loadAgents() {
      try {
        const response = await fetch('/api/agents');
        const data = await response.json();

        availableAgents = data.agents || [];
        populateAgentDropdown();
      } catch (error) {
        console.error('Error loading agents:', error);
      }
    }

    function populateAgentDropdown() {
      const select = document.getElementById('parent-agent');
      select.innerHTML = availableAgents.map(agent =>
        `<option value="${escapeHtml(agent.name)}">${escapeHtml(agent.name)}</option>`
      ).join('');
    }

    function openCreateWorkspaceModal() {
      // Populate agent selection
      const container = document.getElementById('agents-selection');
      container.innerHTML = availableAgents.map(agent => `
        <div class="col-md-6">
          <div class="modern-card p-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="agent-${escapeHtml(agent.name)}"
                     value="${escapeHtml(agent.name)}" onchange="toggleAgent('${escapeHtml(agent.name)}')">
              <label class="form-check-label" for="agent-${escapeHtml(agent.name)}" style="color: var(--text-primary);">
                ${escapeHtml(agent.name)}
              </label>
            </div>
          </div>
        </div>
      `).join('');

      // Reset workflow steps
      workflowSteps = [];
      selectedAgents = new Set();
      renderWorkflowSteps();

      const modal = new bootstrap.Modal(document.getElementById('createWorkspaceModal'));
      modal.show();
    }

    function toggleAgent(agentName) {
      if (selectedAgents.has(agentName)) {
        selectedAgents.delete(agentName);
      } else {
        selectedAgents.add(agentName);
      }
    }

    function addWorkflowStep() {
      workflowSteps.push({
        description: '',
        assignedAgent: ''
      });
      renderWorkflowSteps();
    }

    function removeWorkflowStep(index) {
      workflowSteps.splice(index, 1);
      renderWorkflowSteps();
    }

    function renderWorkflowSteps() {
      const container = document.getElementById('workflow-steps');

      if (workflowSteps.length === 0) {
        container.innerHTML = '<p class="text-muted">No workflow steps defined yet. Click "Add Step" to create your first step.</p>';
        return;
      }

      container.innerHTML = workflowSteps.map((step, index) => `
        <div class="modern-card p-3 mb-3">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <strong style="color: var(--text-primary);">Step ${index + 1}</strong>
            <button type="button" class="modern-btn modern-btn-danger p-1" style="min-width: auto;" onclick="removeWorkflowStep(${index})">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z"/>
              </svg>
            </button>
          </div>
          <div class="mb-2">
            <label class="form-label small" style="color: var(--text-secondary);">Description</label>
            <input type="text" class="form-control" value="${escapeHtml(step.description)}"
                   onchange="workflowSteps[${index}].description = this.value"
                   placeholder="Describe what this step should do">
          </div>
          <div>
            <label class="form-label small" style="color: var(--text-secondary);">Assign Agent</label>
            <select class="form-control" onchange="workflowSteps[${index}].assignedAgent = this.value">
              <option value="">Select agent...</option>
              ${Array.from(selectedAgents).map(agent =>
                `<option value="${escapeHtml(agent)}" ${step.assignedAgent === agent ? 'selected' : ''}>
                  ${escapeHtml(agent)}
                </option>`
              ).join('')}
            </select>
          </div>
        </div>
      `).join('');
    }

    document.getElementById('createWorkspaceBtn').addEventListener('click', async function() {
      const name = document.getElementById('workspace-name').value;
      const description = document.getElementById('workspace-description').value;
      const parentAgent = document.getElementById('parent-agent').value;

      if (!name || !parentAgent) {
        showError('Please fill in all required fields');
        return;
      }

      if (selectedAgents.size === 0) {
        showError('Please select at least one agent');
        return;
      }

      try {
        const response = await fetch('/api/orchestration/workspaces', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: name,
            description: description,
            parent_agent_name: parentAgent,
            agents: Array.from(selectedAgents),
            workflow: workflowSteps.length > 0 ? {
              steps: workflowSteps
            } : undefined
          })
        });

        const result = await response.json();

        if (result.error) {
          showError('Failed to create workspace: ' + result.error);
          return;
        }

        bootstrap.Modal.getInstance(document.getElementById('createWorkspaceModal')).hide();
        loadWorkspaces();
      } catch (error) {
        console.error('Error creating workspace:', error);
        showError('Failed to create workspace');
      }
    });

    async function viewWorkspace(workspaceId) {
      try {
        const response = await fetch(`/api/orchestration/workspaces/${workspaceId}/status`);
        const data = await response.json();

        if (data.error) {
          showError('Failed to load workspace details');
          return;
        }

        renderWorkspaceDetails(data);

        const modal = new bootstrap.Modal(document.getElementById('workspaceDetailsModal'));
        modal.show();
      } catch (error) {
        console.error('Error loading workspace details:', error);
        showError('Failed to load workspace details');
      }
    }

    function renderWorkspaceDetails(workspace) {
      const container = document.getElementById('workspace-details-content');

      const statusBadge = workspace.status === 'active' ? 'badge-success' :
                         workspace.status === 'completed' ? 'badge-info' : 'badge-secondary';

      let html = `
        <div class="mb-4">
          <h6 style="color: var(--text-primary);">${escapeHtml(workspace.workspace_id)}</h6>
          <span class="modern-badge ${statusBadge}">${escapeHtml(workspace.status)}</span>
        </div>
      `;

      if (workspace.workflow) {
        html += `
          <div class="modern-card p-3 mb-3">
            <h6 style="color: var(--text-primary);">Workflow Progress</h6>
            <div class="progress mb-2">
              <div class="progress-bar" role="progressbar" style="width: ${workspace.workflow.progress}%">
                ${workspace.workflow.progress}%
              </div>
            </div>
          </div>
        `;

        if (workspace.workflow.steps && workspace.workflow.steps.length > 0) {
          html += '<div class="mb-3"><h6 style="color: var(--text-primary);">Steps</h6>';

          workspace.workflow.steps.forEach((step, index) => {
            const stepBadge = step.status === 'completed' ? 'badge-success' :
                             step.status === 'failed' ? 'badge-danger' :
                             step.status === 'running' ? 'badge-info' : 'badge-secondary';

            html += `
              <div class="modern-card p-3 mb-2">
                <div class="d-flex justify-content-between align-items-start mb-2">
                  <strong style="color: var(--text-primary);">Step ${index + 1}: ${escapeHtml(step.description || 'Unnamed')}</strong>
                  <span class="modern-badge ${stepBadge}">${escapeHtml(step.status)}</span>
                </div>
                ${step.assigned_agent ? `
                  <p class="mb-1 small" style="color: var(--text-secondary);">Agent: ${escapeHtml(step.assigned_agent)}</p>
                ` : ''}
              </div>
            `;
          });

          html += '</div>';
        }
      }

      container.innerHTML = html;
    }

    async function deleteWorkspace(workspaceId) {
      if (!confirm('Are you sure you want to delete this workspace?')) {
        return;
      }

      try {
        const response = await fetch(`/api/orchestration/workspaces/${workspaceId}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (result.error) {
          showError('Failed to delete workspace: ' + result.error);
          return;
        }

        loadWorkspaces();
      } catch (error) {
        console.error('Error deleting workspace:', error);
        showError('Failed to delete workspace');
      }
    }

    function showError(message) {
      alert(message);
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  </script>
</body>
</html>
{{end}}
