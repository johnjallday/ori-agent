{{define "workflows"}}
<!DOCTYPE html>
<html data-bs-theme="light">
{{template "head.tmpl" .}}

<body class="bg-light">
  <!-- Navigation -->
  <nav class="navbar navbar-expand-lg glassmorphism position-fixed w-100 top-0" style="z-index: 1030; backdrop-filter: blur(10px);">
    <div class="container-fluid px-4">
      <div class="d-flex align-items-center w-100">
        <button id="sidebarToggle" class="modern-btn modern-btn-secondary d-lg-none me-3" title="Toggle Sidebar">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
            <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
          </svg>
        </button>

        <a class="navbar-brand fw-bold d-flex align-items-center" href="/" style="color: var(--primary-color);">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="me-2">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
          {{.Title}}
        </a>

        <div class="d-flex align-items-center gap-3 ms-auto">
          <span id="currentAgentDisplay" class="modern-badge badge-secondary d-flex align-items-center gap-2" style="cursor:pointer; padding: 0.5rem 1rem; border-radius: var(--radius-lg);">
            <span class="status-indicator status-online"></span>
            <span class="fw-medium">{{.CurrentAgent}}</span>
          </span>
          <button id="darkModeToggle" class="modern-btn modern-btn-secondary">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-2.98 0-5.4-2.42-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z"/>
            </svg>
            <span>Dark</span>
          </button>
        </div>
      </div>
    </div>
  </nav>

  <div class="main-content-wrapper">
    {{template "sidebar.tmpl" .}}

    <!-- Main Content -->
    <div class="main-content">
      <div class="container-fluid py-4">
        <div class="modern-card p-4 mb-4">
          <h2 class="mb-3" style="color: var(--text-primary);">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="me-2" style="vertical-align: text-bottom;">
              <path d="M4,2H20A2,2 0 0,1 22,4V20A2,2 0 0,1 20,22H4A2,2 0 0,1 2,20V4A2,2 0 0,1 4,2M4,4V8H9V4H4M11,4V8H20V4H11M4,10V14H9V10H4M11,10V14H20V10H11M4,16V20H9V16H4M11,16V20H20V16H11Z"/>
            </svg>
            Workflow Templates
          </h2>
          <p style="color: var(--text-secondary);">Pre-built workflow templates for common multi-agent collaboration patterns.</p>
        </div>

        <!-- Templates Grid -->
        <div id="templates-grid" class="row g-4">
          <div class="col-12 text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3" style="color: var(--text-muted);">Loading templates...</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Execute Template Modal -->
  <div class="modal fade" id="executeTemplateModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" style="color: var(--text-primary);">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2" style="vertical-align: text-bottom;">
              <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
            </svg>
            Execute Workflow Template
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div id="template-details"></div>
          <div id="template-parameters" class="mt-4"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="modern-btn modern-btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" id="executeBtn" class="modern-btn modern-btn-primary">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
              <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
            </svg>
            Execute
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Execution Status Modal -->
  <div class="modal fade" id="executionStatusModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" style="color: var(--text-primary);">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2">
              <path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"/>
            </svg>
            Workflow Execution Status
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body" style="max-height: 600px; overflow-y: auto;">
          <div id="execution-status-content"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="modern-btn modern-btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script src="js/modules/resizer.js"></script>
  <script src="js/modules/settings.js"></script>
  <script src="js/modules/agents.js"></script>
  <script src="js/modules/plugins.js"></script>
  <script src="js/modules/plugin-config.js"></script>
  <script src="js/modules/plugin-store.js"></script>
  <script src="js/modules/apikey.js"></script>
  <script src="js/modules/sidebar.js"></script>
  <script src="js/modules/update-checker.js"></script>
  <script src="js/modules/plugin-update-checker.js"></script>
  <script src="js/modules/plugin-health.js"></script>
  <script src="js/modules/file-upload.js"></script>

  <script>
    let currentTemplate = null;
    let executionEventSource = null;

    // Load templates on page load
    document.addEventListener('DOMContentLoaded', function() {
      loadTemplates();
    });

    async function loadTemplates() {
      try {
        const response = await fetch('/api/orchestration/templates');
        const data = await response.json();

        if (data.error) {
          showError('Failed to load templates: ' + data.error);
          return;
        }

        renderTemplates(data.templates || []);
      } catch (error) {
        console.error('Error loading templates:', error);
        showError('Failed to load templates');
      }
    }

    function renderTemplates(templates) {
      const grid = document.getElementById('templates-grid');

      if (templates.length === 0) {
        grid.innerHTML = `
          <div class="col-12 text-center py-5">
            <p style="color: var(--text-muted);">No templates available</p>
          </div>
        `;
        return;
      }

      grid.innerHTML = templates.map(template => `
        <div class="col-md-6 col-lg-4">
          <div class="modern-card p-4 h-100 d-flex flex-column">
            <h5 style="color: var(--text-primary);">${escapeHtml(template.name)}</h5>
            <p class="text-muted small mb-3">${escapeHtml(template.description)}</p>

            <div class="mb-3">
              <span class="modern-badge badge-primary">${escapeHtml(template.category || 'General')}</span>
            </div>

            ${template.required_roles && template.required_roles.length > 0 ? `
              <div class="mb-3">
                <small style="color: var(--text-secondary);">Required roles:</small><br>
                ${template.required_roles.map(role =>
                  `<span class="modern-badge badge-secondary me-1">${escapeHtml(role)}</span>`
                ).join('')}
              </div>
            ` : ''}

            <div class="mt-auto">
              <button class="modern-btn modern-btn-primary w-100" onclick="openExecuteModal('${template.id}')">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                  <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
                </svg>
                Execute
              </button>
            </div>
          </div>
        </div>
      `).join('');
    }

    async function openExecuteModal(templateId) {
      try {
        const response = await fetch('/api/orchestration/templates');
        const data = await response.json();
        const template = data.templates.find(t => t.id === templateId);

        if (!template) {
          showError('Template not found');
          return;
        }

        currentTemplate = template;

        // Show template details
        document.getElementById('template-details').innerHTML = `
          <h6 style="color: var(--text-primary);">${escapeHtml(template.name)}</h6>
          <p style="color: var(--text-secondary);">${escapeHtml(template.description)}</p>
        `;

        // Render parameters form
        renderParametersForm(template.parameters || []);

        const modal = new bootstrap.Modal(document.getElementById('executeTemplateModal'));
        modal.show();
      } catch (error) {
        console.error('Error loading template:', error);
        showError('Failed to load template details');
      }
    }

    function renderParametersForm(parameters) {
      const container = document.getElementById('template-parameters');

      if (parameters.length === 0) {
        container.innerHTML = '<p class="text-muted">No parameters required</p>';
        return;
      }

      container.innerHTML = `
        <h6 style="color: var(--text-primary);">Parameters</h6>
        ${parameters.map(param => `
          <div class="mb-3">
            <label class="form-label" style="color: var(--text-primary);">
              ${escapeHtml(param.name)}
              ${param.required ? '<span class="text-danger">*</span>' : ''}
            </label>
            ${param.description ? `<small class="d-block text-muted mb-1">${escapeHtml(param.description)}</small>` : ''}
            ${renderParameterInput(param)}
          </div>
        `).join('')}
      `;
    }

    function renderParameterInput(param) {
      const id = `param-${param.name}`;
      const required = param.required ? 'required' : '';
      const defaultValue = param.default || '';

      switch (param.type) {
        case 'boolean':
          return `
            <select id="${id}" class="form-control" ${required}>
              <option value="true" ${defaultValue === true ? 'selected' : ''}>True</option>
              <option value="false" ${defaultValue === false ? 'selected' : ''}>False</option>
            </select>
          `;
        case 'array':
          return `<textarea id="${id}" class="form-control" rows="3" ${required} placeholder="Enter values, one per line">${Array.isArray(defaultValue) ? defaultValue.join('\n') : ''}</textarea>`;
        case 'object':
          return `<textarea id="${id}" class="form-control" rows="4" ${required} placeholder="Enter JSON object">${typeof defaultValue === 'object' ? JSON.stringify(defaultValue, null, 2) : ''}</textarea>`;
        default:
          return `<input type="text" id="${id}" class="form-control" ${required} value="${escapeHtml(String(defaultValue))}">`;
      }
    }

    document.getElementById('executeBtn').addEventListener('click', async function() {
      if (!currentTemplate) return;

      // Collect parameters
      const parameters = {};
      const paramElements = document.querySelectorAll('[id^="param-"]');

      for (const element of paramElements) {
        const paramName = element.id.replace('param-', '');
        const param = currentTemplate.parameters.find(p => p.name === paramName);

        let value = element.value;

        // Type conversion
        if (param) {
          switch (param.type) {
            case 'boolean':
              value = value === 'true';
              break;
            case 'array':
              value = value.split('\n').map(v => v.trim()).filter(v => v);
              break;
            case 'object':
              try {
                value = JSON.parse(value);
              } catch (e) {
                showError(`Invalid JSON for parameter "${paramName}"`);
                return;
              }
              break;
          }
        }

        parameters[paramName] = value;
      }

      // Execute template
      try {
        const response = await fetch('/api/orchestration/templates/instantiate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            template_id: currentTemplate.id,
            parameters: parameters
          })
        });

        const result = await response.json();

        if (result.error) {
          showError('Failed to execute template: ' + result.error);
          return;
        }

        // Close execute modal
        bootstrap.Modal.getInstance(document.getElementById('executeTemplateModal')).hide();

        // Open status modal and start monitoring
        startExecutionMonitoring(result.workspace_id);
      } catch (error) {
        console.error('Error executing template:', error);
        showError('Failed to execute template');
      }
    });

    function startExecutionMonitoring(workspaceId) {
      const modal = new bootstrap.Modal(document.getElementById('executionStatusModal'));
      modal.show();

      // Start SSE connection
      if (executionEventSource) {
        executionEventSource.close();
      }

      executionEventSource = new EventSource(`/api/orchestration/workspaces/${workspaceId}/status/stream`);

      executionEventSource.onmessage = function(event) {
        try {
          const status = JSON.parse(event.data);
          renderExecutionStatus(status);

          // Close SSE if completed
          if (status.status === 'completed' || status.status === 'failed') {
            executionEventSource.close();
            executionEventSource = null;
          }
        } catch (error) {
          console.error('Error parsing status:', error);
        }
      };

      executionEventSource.onerror = function() {
        console.error('SSE error, falling back to polling');
        executionEventSource.close();
        executionEventSource = null;
        pollExecutionStatus(workspaceId);
      };
    }

    async function pollExecutionStatus(workspaceId) {
      const interval = setInterval(async () => {
        try {
          const response = await fetch(`/api/orchestration/workspaces/${workspaceId}/status`);
          const status = await response.json();

          renderExecutionStatus(status);

          if (status.status === 'completed' || status.status === 'failed') {
            clearInterval(interval);
          }
        } catch (error) {
          console.error('Error polling status:', error);
          clearInterval(interval);
        }
      }, 2000);
    }

    function renderExecutionStatus(status) {
      const container = document.getElementById('execution-status-content');

      const statusBadge = status.status === 'completed' ? 'badge-success' :
                         status.status === 'failed' ? 'badge-danger' :
                         'badge-info';

      let html = `
        <div class="mb-4">
          <h6 style="color: var(--text-primary);">Workspace: ${escapeHtml(status.workspace_id)}</h6>
          <span class="modern-badge ${statusBadge}">${escapeHtml(status.status)}</span>
        </div>
      `;

      if (status.workflow) {
        html += `
          <div class="modern-card p-3 mb-3">
            <h6 style="color: var(--text-primary);">Workflow Progress</h6>
            <div class="progress mb-2">
              <div class="progress-bar" role="progressbar" style="width: ${status.workflow.progress}%">
                ${status.workflow.progress}%
              </div>
            </div>
            <p class="mb-0 small" style="color: var(--text-secondary);">
              Step ${status.workflow.current_step_index + 1} of ${status.workflow.total_steps}
            </p>
          </div>
        `;

        if (status.workflow.steps && status.workflow.steps.length > 0) {
          html += '<div class="mb-3"><h6 style="color: var(--text-primary);">Steps</h6>';

          status.workflow.steps.forEach((step, index) => {
            const stepStatusBadge = step.status === 'completed' ? 'badge-success' :
                                   step.status === 'failed' ? 'badge-danger' :
                                   step.status === 'running' ? 'badge-info' : 'badge-secondary';

            html += `
              <div class="modern-card p-3 mb-2">
                <div class="d-flex justify-content-between align-items-start mb-2">
                  <strong style="color: var(--text-primary);">Step ${index + 1}: ${escapeHtml(step.description || 'Unnamed')}</strong>
                  <span class="modern-badge ${stepStatusBadge}">${escapeHtml(step.status)}</span>
                </div>
                ${step.assigned_agent ? `
                  <p class="mb-1 small" style="color: var(--text-secondary);">Agent: ${escapeHtml(step.assigned_agent)}</p>
                ` : ''}
                ${step.result ? `
                  <div class="mt-2 p-2" style="background: var(--bg-tertiary); border-radius: var(--radius-sm);">
                    <small style="color: var(--text-secondary);">${escapeHtml(step.result)}</small>
                  </div>
                ` : ''}
              </div>
            `;
          });

          html += '</div>';
        }
      }

      container.innerHTML = html;
    }

    function showError(message) {
      alert(message); // Simple error display for now
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Cleanup on page unload
    window.addEventListener('beforeunload', function() {
      if (executionEventSource) {
        executionEventSource.close();
      }
    });
  </script>
</body>
</html>
{{end}}
