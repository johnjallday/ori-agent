// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: proto/tool.proto

package pluginapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ToolService_GetDefinition_FullMethodName        = "/pluginapi.ToolService/GetDefinition"
	ToolService_Call_FullMethodName                 = "/pluginapi.ToolService/Call"
	ToolService_GetVersion_FullMethodName           = "/pluginapi.ToolService/GetVersion"
	ToolService_SetAgentContext_FullMethodName      = "/pluginapi.ToolService/SetAgentContext"
	ToolService_GetDefaultSettings_FullMethodName   = "/pluginapi.ToolService/GetDefaultSettings"
	ToolService_GetRequiredConfig_FullMethodName    = "/pluginapi.ToolService/GetRequiredConfig"
	ToolService_ValidateConfig_FullMethodName       = "/pluginapi.ToolService/ValidateConfig"
	ToolService_InitializeWithConfig_FullMethodName = "/pluginapi.ToolService/InitializeWithConfig"
)

// ToolServiceClient is the client API for ToolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ToolService defines the RPC service for plugin tools
type ToolServiceClient interface {
	// GetDefinition returns the OpenAI function definition for this tool
	GetDefinition(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FunctionDefinition, error)
	// Call executes the tool with the given arguments
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// GetVersion returns the plugin version (optional)
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// SetAgentContext provides agent information to the plugin (optional)
	SetAgentContext(ctx context.Context, in *AgentContextRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetDefaultSettings returns default settings as JSON (optional)
	GetDefaultSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SettingsResponse, error)
	// InitializationProvider methods
	// GetRequiredConfig returns configuration variables needed for initialization
	GetRequiredConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigVariablesResponse, error)
	// ValidateConfig validates the provided configuration
	ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// InitializeWithConfig initializes the plugin with the provided configuration
	InitializeWithConfig(ctx context.Context, in *InitializeConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type toolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToolServiceClient(cc grpc.ClientConnInterface) ToolServiceClient {
	return &toolServiceClient{cc}
}

func (c *toolServiceClient) GetDefinition(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FunctionDefinition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionDefinition)
	err := c.cc.Invoke(ctx, ToolService_GetDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, ToolService_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, ToolService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) SetAgentContext(ctx context.Context, in *AgentContextRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ToolService_SetAgentContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) GetDefaultSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, ToolService_GetDefaultSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) GetRequiredConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigVariablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigVariablesResponse)
	err := c.cc.Invoke(ctx, ToolService_GetRequiredConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, ToolService_ValidateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) InitializeWithConfig(ctx context.Context, in *InitializeConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, ToolService_InitializeWithConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServiceServer is the server API for ToolService service.
// All implementations must embed UnimplementedToolServiceServer
// for forward compatibility.
//
// ToolService defines the RPC service for plugin tools
type ToolServiceServer interface {
	// GetDefinition returns the OpenAI function definition for this tool
	GetDefinition(context.Context, *Empty) (*FunctionDefinition, error)
	// Call executes the tool with the given arguments
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// GetVersion returns the plugin version (optional)
	GetVersion(context.Context, *Empty) (*VersionResponse, error)
	// SetAgentContext provides agent information to the plugin (optional)
	SetAgentContext(context.Context, *AgentContextRequest) (*Empty, error)
	// GetDefaultSettings returns default settings as JSON (optional)
	GetDefaultSettings(context.Context, *Empty) (*SettingsResponse, error)
	// InitializationProvider methods
	// GetRequiredConfig returns configuration variables needed for initialization
	GetRequiredConfig(context.Context, *Empty) (*ConfigVariablesResponse, error)
	// ValidateConfig validates the provided configuration
	ValidateConfig(context.Context, *ValidateConfigRequest) (*ConfigResponse, error)
	// InitializeWithConfig initializes the plugin with the provided configuration
	InitializeWithConfig(context.Context, *InitializeConfigRequest) (*ConfigResponse, error)
	mustEmbedUnimplementedToolServiceServer()
}

// UnimplementedToolServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToolServiceServer struct{}

func (UnimplementedToolServiceServer) GetDefinition(context.Context, *Empty) (*FunctionDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefinition not implemented")
}
func (UnimplementedToolServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedToolServiceServer) GetVersion(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedToolServiceServer) SetAgentContext(context.Context, *AgentContextRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAgentContext not implemented")
}
func (UnimplementedToolServiceServer) GetDefaultSettings(context.Context, *Empty) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultSettings not implemented")
}
func (UnimplementedToolServiceServer) GetRequiredConfig(context.Context, *Empty) (*ConfigVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequiredConfig not implemented")
}
func (UnimplementedToolServiceServer) ValidateConfig(context.Context, *ValidateConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}
func (UnimplementedToolServiceServer) InitializeWithConfig(context.Context, *InitializeConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeWithConfig not implemented")
}
func (UnimplementedToolServiceServer) mustEmbedUnimplementedToolServiceServer() {}
func (UnimplementedToolServiceServer) testEmbeddedByValue()                     {}

// UnsafeToolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServiceServer will
// result in compilation errors.
type UnsafeToolServiceServer interface {
	mustEmbedUnimplementedToolServiceServer()
}

func RegisterToolServiceServer(s grpc.ServiceRegistrar, srv ToolServiceServer) {
	// If the following call pancis, it indicates UnimplementedToolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ToolService_ServiceDesc, srv)
}

func _ToolService_GetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).GetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_GetDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).GetDefinition(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_SetAgentContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).SetAgentContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_SetAgentContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).SetAgentContext(ctx, req.(*AgentContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_GetDefaultSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).GetDefaultSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_GetDefaultSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).GetDefaultSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_GetRequiredConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).GetRequiredConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_GetRequiredConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).GetRequiredConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_ValidateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).ValidateConfig(ctx, req.(*ValidateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_InitializeWithConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).InitializeWithConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolService_InitializeWithConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).InitializeWithConfig(ctx, req.(*InitializeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToolService_ServiceDesc is the grpc.ServiceDesc for ToolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginapi.ToolService",
	HandlerType: (*ToolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefinition",
			Handler:    _ToolService_GetDefinition_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _ToolService_Call_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ToolService_GetVersion_Handler,
		},
		{
			MethodName: "SetAgentContext",
			Handler:    _ToolService_SetAgentContext_Handler,
		},
		{
			MethodName: "GetDefaultSettings",
			Handler:    _ToolService_GetDefaultSettings_Handler,
		},
		{
			MethodName: "GetRequiredConfig",
			Handler:    _ToolService_GetRequiredConfig_Handler,
		},
		{
			MethodName: "ValidateConfig",
			Handler:    _ToolService_ValidateConfig_Handler,
		},
		{
			MethodName: "InitializeWithConfig",
			Handler:    _ToolService_InitializeWithConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tool.proto",
}
