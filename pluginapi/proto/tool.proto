syntax = "proto3";

package pluginapi;

option go_package = "github.com/johnjallday/ori-agent/pluginapi";

// ToolService defines the RPC service for plugin tools
service ToolService {
    // GetDefinition returns the OpenAI function definition for this tool
    rpc GetDefinition(Empty) returns (FunctionDefinition);

    // Call executes the tool with the given arguments
    rpc Call(CallRequest) returns (CallResponse);

    // GetVersion returns the plugin version (optional)
    rpc GetVersion(Empty) returns (VersionResponse);

    // SetAgentContext provides agent information to the plugin (optional)
    rpc SetAgentContext(AgentContextRequest) returns (Empty);

    // GetDefaultSettings returns default settings as JSON (optional)
    rpc GetDefaultSettings(Empty) returns (SettingsResponse);

    // InitializationProvider methods
    // GetRequiredConfig returns configuration variables needed for initialization
    rpc GetRequiredConfig(Empty) returns (ConfigVariablesResponse);

    // ValidateConfig validates the provided configuration
    rpc ValidateConfig(ValidateConfigRequest) returns (ConfigResponse);

    // InitializeWithConfig initializes the plugin with the provided configuration
    rpc InitializeWithConfig(InitializeConfigRequest) returns (ConfigResponse);

    // GetMetadata returns plugin metadata (optional)
    rpc GetMetadata(Empty) returns (MetadataResponse);

    // GetCompatibilityInfo returns plugin compatibility information (optional)
    rpc GetCompatibilityInfo(Empty) returns (CompatibilityInfoResponse);

    // WebPageProvider methods
    // GetWebPages returns a list of available web pages this plugin provides
    rpc GetWebPages(Empty) returns (WebPagesResponse);

    // ServeWebPage handles a web page request and returns HTML/JSON content
    rpc ServeWebPage(WebPageRequest) returns (WebPageResponse);
}

// Empty message for RPCs that don't need parameters
message Empty {}

// FunctionDefinition represents an OpenAI function definition
message FunctionDefinition {
    string name = 1;
    string description = 2;
    string parameters_json = 3;  // JSON-encoded OpenAI parameters schema
}

// CallRequest contains the arguments for calling a tool
message CallRequest {
    string args_json = 1;  // JSON-encoded tool arguments
}

// CallResponse contains the result of a tool call
message CallResponse {
    string result_json = 1;  // JSON-encoded result on success
    string error = 2;        // Error message on failure (empty on success)
}

// VersionResponse contains the plugin version
message VersionResponse {
    string version = 1;
}

// AgentContextRequest provides current agent information to the plugin
message AgentContextRequest {
    string name = 1;           // Agent name (e.g., "default", "my-agent")
    string config_path = 2;    // Path to agent's config.json
    string settings_path = 3;  // Path to agent's agent_settings.json
    string agent_dir = 4;      // Path to agent's directory
}

// SettingsResponse contains plugin settings as JSON
message SettingsResponse {
    string settings_json = 1;  // JSON-encoded settings
    string error = 2;          // Error message on failure (empty on success)
}

// ProtoConfigVariable describes a single configuration variable (protobuf version)
message ProtoConfigVariable {
    string key = 1;
    string name = 2;
    string description = 3;
    string type = 4;  // "string", "int", "filepath", "dirpath", "password", etc.
    bool required = 5;
    string default_value_json = 6;  // JSON-encoded default value (optional)
    string validation = 7;          // Validation rules (optional)
    repeated string options = 8;    // List of valid options (optional)
    string placeholder = 9;         // Placeholder text (optional)
}

// ConfigVariablesResponse contains the list of required config variables
message ConfigVariablesResponse {
    repeated ProtoConfigVariable config_vars = 1;
}

// ValidateConfigRequest contains configuration to validate
message ValidateConfigRequest {
    string config_json = 1;  // JSON-encoded configuration map
}

// InitializeConfigRequest contains configuration for initialization
message InitializeConfigRequest {
    string config_json = 1;  // JSON-encoded configuration map
}

// ConfigResponse contains the result of config operations
message ConfigResponse {
    bool success = 1;
    string error = 2;  // Error message on failure (empty on success)
}

// Maintainer represents a single plugin maintainer/contributor
message Maintainer {
    string name = 1;                   // Full name
    string email = 2;                  // Contact email
    string organization = 3;           // Organization affiliation
    string website = 4;                // Personal/project website
    string role = 5;                   // "author", "maintainer", "contributor"
    bool primary = 6;                  // Is this the primary/original author?
}

// PluginMetadata contains comprehensive plugin information
message PluginMetadata {
    repeated Maintainer maintainers = 1;
    string license = 2;                // e.g., "MIT", "Apache-2.0", "GPL-3.0"
    string repository = 3;             // Source code repository URL
}

// MetadataResponse contains plugin metadata
message MetadataResponse {
    PluginMetadata metadata = 1;
    string error = 2;  // Error message on failure (empty on success)
}

// CompatibilityInfoResponse contains plugin compatibility information
message CompatibilityInfoResponse {
    string min_agent_version = 1;  // Minimum ori-agent version required
    string max_agent_version = 2;  // Maximum ori-agent version supported
    string api_version = 3;         // Plugin API version
}

// WebPagesResponse contains the list of available web pages
message WebPagesResponse {
    repeated string pages = 1;  // List of page paths (e.g., "marketplace", "settings")
}

// WebPageRequest contains the web page request parameters
message WebPageRequest {
    string path = 1;  // The requested path (e.g., "marketplace")
    map<string, string> query = 2;  // URL query parameters
}

// WebPageResponse contains the web page content
message WebPageResponse {
    string content = 1;  // HTML or JSON content
    string content_type = 2;  // MIME type (e.g., "text/html", "application/json")
    string error = 3;  // Error message on failure (empty on success)
}
